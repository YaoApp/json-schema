// This file is generated by AI
// Do not modify this file manually


//============ model.d.ts ============

// TypeScript type definitions for the Golang code

export type QueryParam = {
  model?: string; // optional, the model to query
  table?: string; // optional, the table to query
  alias?: string; // optional, table alias
  export?: string; // optional, export prefix
  select?: (string | Raw)[]; // optional, select columns, can be strings or Raw
  wheres?: QueryWhere[]; // optional, array of where conditions
  orders?: QueryOrder[]; // optional, array of ordering conditions
  limit?: number; // optional, limit records
  page?: number; // optional, pagination page number
  pageSize?: number; // optional, number of records per page
  withs?: Record<string, With>; // optional, mapping of relations
}

export type Raw = any; // Placeholder for actually defining Raw type

export type QueryWhere = {
  rel?: string; // optional, relation name
  column?: string | Raw; // column to apply where on
  value?: any; // the value to compare with
  method?: string; // method for where clause such as 'where', 'orwhere'
  op?: string; // operator such as 'eq', 'gt'
  wheres?: QueryWhere[]; // nested wheres for grouped conditions
}

export type QueryOrder = {
  rel?: string; // optional, relation name
  column: string; // column to order by
  option?: string; // ordering option 'asc', 'desc'
}

export type With = {
  name: string; // the relation name
  query?: QueryParam; // query parameters for the relation
}

/**
 * Find a record by id
 * @param process models.**WidgetID**.Find
 * @param id string | number record id
 * @param query query parameters
 */
export declare function Process(
  process: `models.${string}.Find`,
  id: string | number,
  query: QueryParam
): Record<string, any>;

/**
 * Get records based on query parameters
 * @param process models.**WidgetID**.Get
 * @param query query parameters
 */
export declare function Process(
  process: `models.${string}.Get`,
  query: QueryParam
): Record<string, any>[];

/**
 * Paginate records based on query parameters
 * @param process models.**WidgetID**.Paginate
 * @param query query parameters
 * @param page number page number
 * @param pageSize number size of page
 */
export declare function Process(
  process: `models.${string}.Paginate`,
  query: QueryParam,
  page: number,
  pageSize: number
): Record<string, any>;

/**
 * Create a new record
 * @param process models.**WidgetID**.Create
 * @param row new record data
 */
export declare function Process(
  process: `models.${string}.Create`,
  row: Record<string, any>
): number;

/**
 * Update a record by id
 * @param process models.**WidgetID**.Update
 * @param id string | number record id
 * @param row data to update
 */
export declare function Process(
  process: `models.${string}.Update`,
  id: string | number,
  row: Record<string, any>
): void;

/**
 * Save a record (create or update)
 * @param process models.**WidgetID**.Save
 * @param row record data
 */
export declare function Process(
  process: `models.${string}.Save`,
  row: Record<string, any>
): number;

/**
 * Delete a record by id
 * @param process models.**WidgetID**.Delete
 * @param id string | number record id
 */
export declare function Process(
  process: `models.${string}.Delete`,
  id: string | number
): void;

/**
 * Destroy a record by id
 * @param process models.**WidgetID**.Destroy
 * @param id string | number record id
 */
export declare function Process(
  process: `models.${string}.Destroy`,
  id: string | number
): void;

/**
 * Insert multiple records
 * @param process models.**WidgetID**.Insert
 * @param columns column names
 * @param rows data rows to insert
 */
export declare function Process(
  process: `models.${string}.Insert`,
  columns: string[],
  rows: Array<Array<any>>
): void;

/**
 * Update records based on conditions
 * @param process models.**WidgetID**.UpdateWhere
 * @param query query parameters
 * @param row data to update
 */
export declare function Process(
  process: `models.${string}.UpdateWhere`,
  query: QueryParam,
  row: Record<string, any>
): number;

/**
 * Delete records based on conditions
 * @param process models.**WidgetID**.DeleteWhere
 * @param query query parameters
 */
export declare function Process(
  process: `models.${string}.DeleteWhere`,
  query: QueryParam
): number;

/**
 * Destroy records based on conditions
 * @param process models.**WidgetID**.DestroyWhere
 * @param query query parameters
 */
export declare function Process(
  process: `models.${string}.DestroyWhere`,
  query: QueryParam
): number;

/**
 * Save multiple records
 * @param process models.**WidgetID**.EachSave
 * @param records records data
 * @param eachRow additional data applied to each row
 */
export declare function Process(
  process: `models.${string}.EachSave`,
  records: Array<Record<string, any>>,
  eachRow?: Record<string, any>
): number[];

/**
 * Delete specified records and save new records
 * @param process models.**WidgetID**.EachSaveAfterDelete
 * @param ids record ids to delete
 * @param records new records data
 * @param eachRow additional data applied to each new row
 */
export declare function Process(
  process: `models.${string}.EachSaveAfterDelete`,
  ids: number[],
  records: Array<Record<string, any>>,
  eachRow?: Record<string, any>
): number[];

/**
 * Get select options
 * @param process models.**WidgetID**.SelectOption
 * @param keyword search keyword
 * @param name property to use as name, default 'name'
 * @param value property to use as value, default 'id'
 * @param limit max number of results, default 20
 */
export declare function Process(
  process: `models.${string}.SelectOption`,
  keyword?: string,
  name?: string,
  value?: string,
  limit?: number,
): Record<'name' | 'id', any>[];

/**
 * Migrate the model
 * @param process models.**WidgetID**.Migrate
 * @param force whether to force the migration
 */
export declare function Process(
  process: `models.${string}.Migrate`,
  force?: boolean,
): void;

/**
 * Load the model
 * @param process models.**WidgetID**.Load
 * @param file the file path
 * @param source optional source data
 */
export declare function Process(
  process: `models.${string}.Load`,
  file: string,
  source?: string
): void;

/**
 * Reload the model
 * @param process models.**WidgetID**.Reload
 */
export declare function Process(
  process: `models.${string}.Reload`,
): void;

/**
 * Read the model DSL
 * @param process models.**WidgetID**.Read
 */
export declare function Process(
  process: `models.${string}.Read`
): any;

/**
 * Check if the model is loaded
 * @param process models.**WidgetID**.Exists
 */
export declare function Process(
  process: `models.${string}.Exists`
): boolean;


//============ fs.d.ts ============

export type FileSystemRoot = "app" | "data";

/**
 * Upload Progress Information
 */
export interface UploadProgress {
    // Total size of the upload
    Total: number;
    // Uploaded size so far
    Uploaded: number;
    // Whether the upload is completed
    Completed: boolean;
}

/**
 * Read file content
 * @param process the process name in the format of `fs.${FileSystemRoot}.ReadFile`
 * @param filename file name relative to the root
 * @returns file contents as a string
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.ReadFile`,
    filename: string
): string;

/**
 * Read file content as buffer
 * @param process the process name in the format of `fs.${FileSystemRoot}.ReadFileBuffer`
 * @param filename file name relative to the root
 * @returns file contents as a buffer
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.ReadFileBuffer`,
    filename: string
): Uint8Array;

/**
 * Write file content
 * @param process the process name in the format of `fs.${FileSystemRoot}.WriteFile`
 * @param filename file name relative to the root
 * @param content the content to write to the file
 * @param perm file permissions
 * @returns number of bytes written
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.WriteFile`,
    filename: string,
    content: string,
    perm?: number
): number;

/**
 * Write file content from buffer
 * @param process the process name in the format of `fs.${FileSystemRoot}.WriteFileBuffer`
 * @param filename file name relative to the root
 * @param content the content in buffer format
 * @param perm file permissions
 * @returns number of bytes written
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.WriteFileBuffer`,
    filename: string,
    content: Uint8Array,
    perm?: number
): number;

/**
 * Append file content
 * @param process the process name in the format of `fs.${FileSystemRoot}.AppendFile`
 * @param filename file name relative to the root
 * @param content the content to append to the file
 * @param perm file permissions
 * @returns number of bytes written
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.AppendFile`,
    filename: string,
    content: string,
    perm?: number
): number;

/**
 * Append file content from buffer
 * @param process the process name in the format of `fs.${FileSystemRoot}.AppendFileBuffer`
 * @param filename file name relative to the root
 * @param content the content in buffer format
 * @param perm file permissions
 * @returns number of bytes written
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.AppendFileBuffer`,
    filename: string,
    content: Uint8Array,
    perm?: number
): number;

/**
 * Insert file content
 * @param process the process name in the format of `fs.${FileSystemRoot}.InsertFile`
 * @param filename file name relative to the root
 * @param offset the offset at which to insert the content
 * @param content the content to insert into the file
 * @param perm file permissions
 * @returns number of bytes written
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.InsertFile`,
    filename: string,
    offset: number,
    content: string,
    perm?: number
): number;

/**
 * Insert file content from buffer
 * @param process the process name in the format of `fs.${FileSystemRoot}.InsertFileBuffer`
 * @param filename file name relative to the root
 * @param offset the offset at which to insert the content
 * @param content the content in buffer format
 * @param perm file permissions
 * @returns number of bytes written
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.InsertFileBuffer`,
    filename: string,
    offset: number,
    content: Uint8Array,
    perm?: number
): number;

/**
 * Read directory content
 * @param process the process name in the format of `fs.${FileSystemRoot}.ReadDir`
 * @param dir directory name relative to the root
 * @param recursive whether to read directories recursively
 * @returns list of directory entries
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.ReadDir`,
    dir: string,
    recursive?: boolean
): string[];

/**
 * Find all files matching the pattern
 * @param process the process name in the format of `fs.${FileSystemRoot}.Glob`
 * @param pattern glob pattern to match files
 * @returns list of matched files
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.Glob`,
    pattern: string
): string[];

/**
 * Create a new directory
 * @param process the process name in the format of `fs.${FileSystemRoot}.Mkdir`
 * @param dir directory name relative to the root
 * @param perm directory permissions
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.Mkdir`,
    dir: string,
    perm?: number
): void;

/**
 * Create a new directory with all necessary parents
 * @param process the process name in the format of `fs.${FileSystemRoot}.MkdirAll`
 * @param dir directory name relative to the root
 * @param perm directory permissions
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.MkdirAll`,
    dir: string,
    perm?: number
): void;

/**
 * Create a temporary directory
 * @param process the process name in the format of `fs.${FileSystemRoot}.MkdirTemp`
 * @param dir directory in which to create a temporary directory
 * @param pattern pattern to use for the temporary directory name
 * @returns path of the created temporary directory
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.MkdirTemp`,
    dir?: string,
    pattern?: string
): string;

/**
 * Remove a file or empty directory
 * @param process the process name in the format of `fs.${FileSystemRoot}.Remove`
 * @param name file or directory name relative to the root
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.Remove`,
    name: string
): void;

/**
 * Remove a file or directory and its contents
 * @param process the process name in the format of `fs.${FileSystemRoot}.RemoveAll`
 * @param name file or directory name relative to the root
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.RemoveAll`,
    name: string
): void;

/**
 * Check if a file or directory exists
 * @param process the process name in the format of `fs.${FileSystemRoot}.Exists`
 * @param name file or directory name relative to the root
 * @returns true if the file or directory exists, false otherwise
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.Exists`,
    name: string
): boolean;

/**
 * Check if a path is a directory
 * @param process the process name in the format of `fs.${FileSystemRoot}.IsDir`
 * @param name path name relative to the root
 * @returns true if the path is a directory, false otherwise
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.IsDir`,
    name: string
): boolean;

/**
 * Check if a path is a file
 * @param process the process name in the format of `fs.${FileSystemRoot}.IsFile`
 * @param name path name relative to the root
 * @returns true if the path is a file, false otherwise
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.IsFile`,
    name: string
): boolean;

/**
 * Check if a path is a symbolic link
 * @param process the process name in the format of `fs.${FileSystemRoot}.IsLink`
 * @param name path name relative to the root
 * @returns true if the path is a symbolic link, false otherwise
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.IsLink`,
    name: string
): boolean;

/**
 * Change the mode of a file
 * @param process the process name in the format of `fs.${FileSystemRoot}.Chmod`
 * @param name file name relative to the root
 * @param perm new file permissions
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.Chmod`,
    name: string,
    perm: number
): void;

/**
 * Get the size of a file
 * @param process the process name in the format of `fs.${FileSystemRoot}.Size`
 * @param name file name relative to the root
 * @returns size of the file in bytes
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.Size`,
    name: string
): number;

/**
 * Get the mode of a file
 * @param process the process name in the format of `fs.${FileSystemRoot}.Mode`
 * @param name file name relative to the root
 * @returns mode of the file
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.Mode`,
    name: string
): number;

/**
 * Get the modification time of a file
 * @param process the process name in the format of `fs.${FileSystemRoot}.ModTime`
 * @param name file name relative to the root
 * @returns modification time as Unix timestamp
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.ModTime`,
    name: string
): number;

/**
 * Get the base name of a path
 * @param process the process name in the format of `fs.${FileSystemRoot}.BaseName`
 * @param name path name
 * @returns base name of the path
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.BaseName`,
    name: string
): string;

/**
 * Get the directory name of a path
 * @param process the process name in the format of `fs.${FileSystemRoot}.DirName`
 * @param name path name
 * @returns directory name of the path
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.DirName`,
    name: string
): string;

/**
 * Get the extension name of a file
 * @param process the process name in the format of `fs.${FileSystemRoot}.ExtName`
 * @param name file name
 * @returns extension name of the file
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.ExtName`,
    name: string
): string;

/**
 * Get the MIME type of a file
 * @param process the process name in the format of `fs.${FileSystemRoot}.MimeType`
 * @param name file name relative to the root
 * @returns MIME type of the file
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.MimeType`,
    name: string
): string;

/**
 * Move a file
 * @param process the process name in the format of `fs.${FileSystemRoot}.Move`
 * @param src source file name relative to the root
 * @param dst destination file name relative to the root
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.Move`,
    src: string,
    dst: string
): void;

/**
 * Move a file and append the content
 * @param process the process name in the format of `fs.${FileSystemRoot}.MoveAppend`
 * @param src source file name relative to the root
 * @param dst destination file name relative to the root
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.MoveAppend`,
    src: string,
    dst: string
): void;

/**
 * Move a file and insert the content
 * @param process the process name in the format of `fs.${FileSystemRoot}.MoveInsert`
 * @param src source file name relative to the root
 * @param dst destination file name relative to the root
 * @param offset offset at which to insert the content
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.MoveInsert`,
    src: string,
    dst: string,
    offset: number
): void;

/**
 * Zip a directory
 * @param process the process name in the format of `fs.${FileSystemRoot}.Zip`
 * @param src source directory name relative to the root
 * @param dst destination zip file name relative to the root
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.Zip`,
    src: string,
    dst: string
): void;

/**
 * Unzip a file and return the file list
 * @param process the process name in the format of `fs.${FileSystemRoot}.Unzip`
 * @param src source zip file name relative to the root
 * @param dst destination directory name relative to the root
 * @returns list of extracted files
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.Unzip`,
    src: string,
    dst: string
): string[];

/**
 * Copy a file
 * @param process the process name in the format of `fs.${FileSystemRoot}.Copy`
 * @param src source file name relative to the root
 * @param dst destination file name relative to the root
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.Copy`,
    src: string,
    dst: string
): void;

/**
 * Upload a file
 * @param process the process name in the format of `fs.${FileSystemRoot}.Upload`
 * @param uploadFile the file to be uploaded
 * @param props optional properties for validation
 * @returns path to the uploaded file or upload progress information
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.Upload`,
    uploadFile: any, // Type for uploadFile and props need to be defined based on additional context
    props?: any // Placeholder for additional arguments
): string | { path: string; uid: string; progress: UploadProgress };

/**
 * Download a file
 * @param process the process name in the format of `fs.${FileSystemRoot}.Download`
 * @param filename file name relative to the root
 * @returns the file content and its type
 */
export declare function Process(
    process: `fs.${FileSystemRoot}.Download`,
    filename: string
): { content: any; type: string };

//============ http.d.ts ============


/**
 * Represents an HTTP response.
 */
export interface HttpResponse {
  // The status code of the response.
  status: number;
  
  // The data returned by the response.
  data: any;

  // The headers returned by the response.
  headers: Record<string, string | string[]>;

  // The code of the response.
  code: number;

  // The message included in the response.
  message: string;
}

/**
 * Represents an HTTP file to be uploaded.
 */
export interface HttpFile {
  // The name of the file.
  name: string;

  // Optional path to the file.
  path?: string;

  // Optional base64 encoded data of the file.
  data?: string;
}

/**
 * Read file content
 * @param process http.Get
 * @param url string The URL to send the GET request to.
 * @param query Optional query parameters to include in the request.
 * @param headers Optional headers to include in the request.
 */
export declare function Process(
  process: `http.Get`,
  url: string,
  query?: Record<string, string> | [string, string][] | Array<Record<string, string>> | string,
  headers?: Record<string, string> | Record<string, string>[],
): HttpResponse;

/**
 * Send a POST request
 * @param process http.Post
 * @param url string The URL to send the POST request to.
 * @param payload Optional data to send in the body of the request.
 * @param files Optional files to upload with the request.
 * @param query Optional query parameters to include in the request.
 * @param headers Optional headers to include in the request.
 */
export declare function Process(
  process: `http.Post`,
  url: string,
  payload?: any,
  files?: Record<string, string>,
  query?: Record<string, string> | [string, string][] | Array<Record<string, string>> | string,
  headers?: Record<string, string> | Record<string, string>[],
): HttpResponse;

/**
 * Send a PUT request
 * @param process http.Put
 * @param url string The URL to send the PUT request to.
 * @param payload Optional data to send in the body of the request.
 * @param query Optional query parameters to include in the request.
 * @param headers Optional headers to include in the request.
 */
export declare function Process(
  process: `http.Put`,
  url: string,
  payload?: any,
  query?: Record<string, string> | [string, string][] | Array<Record<string, string>> | string,
  headers?: Record<string, string> | Record<string, string>[],
): HttpResponse;

/**
 * Send a PATCH request
 * @param process http.Patch
 * @param url string The URL to send the PATCH request to.
 * @param payload Optional data to send in the body of the request.
 * @param query Optional query parameters to include in the request.
 * @param headers Optional headers to include in the request.
 */
export declare function Process(
  process: `http.Patch`,
  url: string,
  payload?: any,
  query?: Record<string, string> | [string, string][] | Array<Record<string, string>> | string,
  headers?: Record<string, string> | Record<string, string>[],
): HttpResponse;

/**
 * Send a DELETE request
 * @param process http.Delete
 * @param url string The URL to send the DELETE request to.
 * @param payload Optional data to send in the body of the request.
 * @param query Optional query parameters to include in the request.
 * @param headers Optional headers to include in the request.
 */
export declare function Process(
  process: `http.Delete`,
  url: string,
  payload?: any,
  query?: Record<string, string> | [string, string][] | Array<Record<string, string>> | string,
  headers?: Record<string, string> | Record<string, string>[],
): HttpResponse;

/**
 * Send a HEAD request
 * @param process http.Head
 * @param url string The URL to send the HEAD request to.
 * @param payload Optional data to send in the request.
 * @param query Optional query parameters to include in the request.
 * @param headers Optional headers to include in the request.
 */
export declare function Process(
  process: `http.Head`,
  url: string,
  payload?: any,
  query?: Record<string, string> | [string, string][] | Array<Record<string, string>> | string,
  headers?: Record<string, string> | Record<string, string>[],
): HttpResponse;

/**
 * Send an HTTP request
 * @param process http.Send
 * @param method string The HTTP method to use for the request (e.g., GET, POST, etc.).
 * @param url string The URL to send the request to.
 * @param payload Optional data to send in the body of the request.
 * @param query Optional query parameters to include in the request.
 * @param headers Optional headers to include in the request.
 * @param files Optional files to upload with the request.
 */
export declare function Process(
  process: `http.Send`,
  method: string,
  url: string,
  payload?: any,
  query?: Record<string, string> | [string, string][] | Array<Record<string, string>> | string,
  headers?: Record<string, string> | Record<string, string>[],
  files?: HttpFile[],
): HttpResponse;

/**
 * Stream HTTP request
 * @param process http.Stream
 * @param method string The HTTP method to use for the request (e.g., GET, POST, etc.).
 * @param url string The URL to send the request to.
 * @param handler string The handler process name for streaming data.
 * @param payload Optional data to send in the body of the request.
 * @param query Optional query parameters to include in the request.
 * @param headers Optional headers to include in the request.
 */
export declare function Process(
  process: `http.Stream`,
  method: string,
  url: string,
  handler: string,
  payload?: any,
  query?: Record<string, string> | [string, string][] | Array<Record<string, string>> | string,
  headers?: Record<string, string> | Record<string, string>[],
): any;


/**
 * Execute a process
 * @param name the process name
 * @param args additional arguments for the process (variadic parameters)
 */
export declare function Process(name: `${string}`, ...args: any[]): any;
