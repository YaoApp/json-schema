requirements: |
  **Objective:**

  Analyze the provided Golang code to generate a comprehensive TypeScript definition file. The focus should be on interpreting the logic within the Golang code, rather than just the function signatures.

  **Requirements:**

  1. **Golang Code Analysis:**
    - Analyze the logic of the Golang code in the specified files.
    - Extract relevant data types and structures from the Golang code to inform the TypeScript definitions.

  2. **TypeScript Definition File:**
    - Define TypeScript types and interfaces that correspond to the Golang structures and logic.
    - Each process function found in `process.go` and its related types must be defined in TypeScript.
    - DO NOT use the Promise type in the TypeScript definitions.
    - The class methods should be named same as the function name in the ExportObject. eg: tmpl.Set("Exists", obj.exists(iso)) the method name should be "Exists".

  3. **Code Block Identification:**
    - Use `{{[ CODE BEGIN ]}}` and `{{[ CODE END ]}}` comments to clearly identify the boundaries of the code block within the output. These markers must remain in the final TypeScript file.

  4. **Function Extraction:**
    - Return the complete definitions of all functions in the `objects/fs/fs.go` file.
    - Each type or interface used in the function **should be** defined in the TypeScript file.
    
  5. **Function Comments:**
    - Must include the function comments in the TypeScript definitions.
    - Must include the method comments in the TypeScript definitions.
    - Use /** */ for comments, it should be above the function or method, and can be recognized by the VSCode, Cursor, etc.
    - The Type structure or Interface which is used in the function , each field should have a comment.

  6. **Export**
    - Each function should be exported.
    - Each type should be exported.

Sources:
  - "gou/fs/types.go"
  - "gou/fs/fs.go"
  - "gou/runtime/v8/objects/fs/fs.go"

TypeScript Template: |
  ```typescript
  {{[ CODE BEGIN ]}}
  export type FileSystemName = "app" | "data" | string;
  export type XXXX = {}
  ....

  export declare class FS {
    /**
    * Create a new instance of FS
    * @param root Root path for the application.
    */
    constructor(root: FileSystemName);
    ...
  }
  ...
  {{[ CODE END ]}}
  ```
